from datetime import datetime
from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State, default_state
from aiogram.types import Message, CallbackQuery, FSInputFile, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils.markdown import hlink
from loguru import logger
from database_scripts.db import counter_parser_catalog_query
from middleware.throttling import throttled
from scripts.wb_category_parser import parser

router = Router()


class Parser_Category_States(StatesGroup):
    """—Å—Ç–µ–π—Ç—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    price_range = State()
    low_price = State()
    top_price = State()
    input_category = State()
    repeat_enter_link_category = State()


@throttled(rate=2)
@router.message(StateFilter(default_state), F.text == '–ü–∞—Ä—Å–µ—Ä üóÇ –∫–∞—Ç–µ–≥–æ—Ä–∏–π')
@router.message(StateFilter(default_state), Command("cpars"))
async def parser_wb_by_category_states(message: Message, state: FSMContext):
    """–∑–∞–ø—É—Å–∫ —Å—Ç–µ–π—Ç–æ–≤ –ø–æ –ø–∞—Ä—Å–µ—Ä–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="–î–∞", callback_data="yes"))
    builder.add(InlineKeyboardButton(text="–ù–µ—Ç", callback_data="no"))
    await message.answer("–í—ã–±—Ä–∞—Ç—å —Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω? ‚öñÔ∏è", reply_markup=builder.as_markup())
    await state.set_state(Parser_Category_States.price_range)


@router.message(StateFilter(Parser_Category_States.price_range))
async def error_state_price_range(message: Message, state: FSMContext):
    """—Å—Ç–µ–π—Ç –ø—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –≤–≤–æ–¥–µ –¥–∞–Ω–Ω—ã—Ö"""
    await message.reply(text='‚õîÔ∏è –í—ã –≤—ã—à–ª–∏ –∏–∑ –ø–∞—Ä—Å–µ—Ä-—Ä–µ–∂–∏–º–∞')
    await state.clear()


@router.callback_query(StateFilter(Parser_Category_States.price_range))
async def charge_price_range_state(callback: CallbackQuery, state: FSMContext):
    """—Å—Ç–µ–π—Ç –≤—ã–±–æ—Ä–∞ —Ü–µ–Ω–æ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∏–ª–∏ –≤–≤–æ–¥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if callback.data == 'yes':  # –µ—Å–ª–∏ –¥–∞, –≤–≤–æ–¥ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç–µ–π—Ç—É –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã
        await callback.message.delete()
        await callback.message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∂–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É —Ü–µ–Ω:')
        await state.set_state(Parser_Category_States.low_price)
    else:  # –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –≤–≤–æ–¥ —Å—Å—ã–ª–∫–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Å—Ç–µ–π—Ç –≤–≤–æ–¥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await callback.message.delete()
        await callback.message.answer(text='–í—Å—Ç–∞–≤—Ç–µ —Å–≤–æ—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤. –ù–∞–ø—Ä–∏–º–µ—Ä:\n<pre><code>https://www.wildberries.ru/catalog/elektronika/smartfony-i-telefony/vse-smartfony</code></pre>',
                                      disable_web_page_preview=False)
        await state.set_state(Parser_Category_States.input_category)


@router.message(StateFilter(Parser_Category_States.low_price))
async def low_price_range_state(message: Message, state: FSMContext):
    """—Å—Ç–µ–π—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–≤–æ–¥–∞ –Ω–∏–∂–Ω–µ–≥–æ –ø–æ—Ä–æ–≥–∞ —Ü–µ–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤–µ—Ä—Ö–Ω–µ–º—É –ø–æ—Ä–æ–≥—É —Ü–µ–Ω—ã"""
    if message.text.isdigit():
        if int(message.text) > 0:
            await state.update_data(low_price=message.text)
            await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä—Ö–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É —Ü–µ–Ω:')
            await state.set_state(Parser_Category_States.top_price)
        else:
            await state.update_data(low_price=message.text)
            await message.reply(text='–ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.\n–í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑:')
    else:
        await message.reply("‚õîÔ∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ù–∞–¥–æ –≤–≤–æ–¥–∏—Ç—å —á–∏—Å–ª–æ! –í—ã –≤—ã—à–ª–∏ –∏–∑ –ø–∞—Ä—Å–µ—Ä-—Ä–µ–∂–∏–º–∞")
        await state.clear()


@router.message(StateFilter(Parser_Category_States.top_price))
async def top_price_range_state(message: Message, state: FSMContext):
    """—Å—Ç–µ–π—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–≤–æ–¥–∞ –≤–µ—Ä—Ö–Ω–µ–≥–æ –ø–æ—Ä–æ–≥–∞ —Ü–µ–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    data = await state.get_data()
    if message.text.isdigit():
        if int(data.get('low_price')) < int(message.text):
            await state.update_data(top_price=message.text)
            await message.answer(text='–í—Å—Ç–∞–≤—Ç–µ —Å–≤–æ—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤. –ù–∞–ø—Ä–∏–º–µ—Ä:\n<pre><code>https://www.wildberries.ru/catalog/elektronika/smartfony-i-telefony/vse-smartfony</code></pre>',
                                 disable_web_page_preview=False)
            await state.set_state(Parser_Category_States.input_category)
        else:
            await message.reply(text=f'–í–∞—à–∞ –Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –º–µ–Ω—å—à–µ –≤–µ—Ä—Ö–Ω–µ–π!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –±–æ–ª—å—à–µ —á–µ–º {data.get("low_price")}')
            await state.update_data(top_price=message.text)
    else:
        await message.reply("‚õîÔ∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ù–∞–¥–æ –≤–≤–æ–¥–∏—Ç—å —á–∏—Å–ª–æ! –í—ã –≤—ã—à–ª–∏ –∏–∑ –ø–∞—Ä—Å–µ—Ä-—Ä–µ–∂–∏–º–∞")
        await state.clear()


@router.message(StateFilter(Parser_Category_States.input_category))
async def run_parser_by_category(message: Message, state: FSMContext):
    """—Å—Ç–µ–π—Ç –≤–≤–æ–¥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞"""
    if 'https://www.wildberries.ru/catalog/' in message.text:
        query_from_user = message.text.split('https://www.wildberries.ru/catalog/')[-1]
        counter_parser_catalog_query(user_id=message.from_user.id, query=query_from_user)  # –∑–∞–ø–∏—Å—å –≤ –±–¥ –∑–∞–ø—Ä–æ—Å–∞/—Å—á–µ—Ç-–∫–∞
        data = await state.get_data()
        await state.clear()
        start = datetime.now()
        low_price = data.get('low_price')
        top_price = data.get('top_price')
        await message.reply(text=f'‚öôÔ∏è –ü–∞—Ä—Å–µ—Ä –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É c —Ü–µ–Ω–æ–≤—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º –æ—Ç {low_price} –¥–æ {top_price}...')
        filename_path = await parser(url=message.text, low_price=int(low_price), top_price=int(top_price), discount=0)
        logger.info(f'User: {message.from_user.id}({message.from_user.full_name}) run category_parser with price range "{low_price}-{top_price}": {"/".join((message.text.split("/")[4:]))}')
        end = datetime.now()
        total = end - start
        try:
            await message.answer_document(document=FSInputFile(filename_path),
                                          caption=f"‚úÖ–†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ. –ó–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: "
                                                  f"{str(total.seconds)} —Å–µ–∫.\n"
                                                  f"{hlink(title='–ö–∞–Ω–∞–ª –ø–∞—Ä—Å–µ—Ä–∞',url='https://t.me/timur_parsing_blog')}"
                                                  f" | –ê–¥–º–∏–Ω: @object_13")
        except TypeError:
            await message.answer('‚õîÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @object_13')
            logger.error(f'User: {message.from_user.id}({message.from_user.full_name}) category_parser with "{message.text}"')
        await state.clear()
    else:
        await message.reply(text='‚õîÔ∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ —Å—Å—ã–ª–∫–∏! –°—Å—ã–ª–∫—É –Ω–∞–¥–æ –≤–≤–æ–¥–∏—Ç—å –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤, –∫–∞–∫ –≤ –æ–±—Ä–∞–∑—Ü–µ.')
        logger.error(f'User: {message.from_user.id}({message.from_user.full_name}) category_parser with "{message.text}"')
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="–î–∞", callback_data="yes"))
        builder.add(InlineKeyboardButton(text="–ù–µ—Ç", callback_data="no"))
        await message.answer("–í–≤–µ—Å—Ç–∏ —Å—Å—ã–ª–∫—É –µ—â–µ —Ä–∞–∑?", reply_markup=builder.as_markup())
        await state.set_state(Parser_Category_States.repeat_enter_link_category)


@router.message(StateFilter(Parser_Category_States.repeat_enter_link_category))
async def error_state_input_category(message: Message, state: FSMContext):
    """—Å—Ç–µ–π—Ç –ø—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –≤–≤–æ–¥–µ –¥–∞–Ω–Ω—ã—Ö"""
    await message.reply(text='‚õîÔ∏è –í—ã –≤—ã—à–ª–∏ –∏–∑ –ø–∞—Ä—Å–µ—Ä-—Ä–µ–∂–∏–º–∞')
    await state.clear()


@router.callback_query(StateFilter(Parser_Category_States.repeat_enter_link_category))
async def repeat_enter_link_category_state(callback: CallbackQuery, state: FSMContext):
    """–ø–æ–≤—Ç–æ—Ä –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –≤–≤–æ–¥–∞ –∏ —Ä–µ—à–µ–Ω–∏–∏ —é–∑–µ—Ä–∞ –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –≤–≤–æ–¥–µ"""
    if callback.data == 'yes':
        logger.warning(f'User: {callback.from_user.id}({callback.from_user.full_name}) repeat enter category')
        await callback.message.answer(text='–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –µ—â–µ —Ä–∞–∑ (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤):')
        await state.set_state(Parser_Category_States.input_category)
        await callback.message.delete()
    else:
        await callback.message.answer(text='–í—ã –≤—ã—à–ª–∏ –∏–∑ –ø–∞—Ä—Å–µ—Ä-—Ä–µ–∂–∏–º–∞')
        await callback.message.delete()
        await state.clear()
